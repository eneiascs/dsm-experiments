/*
 * generated by Xtext 2.11.0
 */
package br.unb.autoexp.tests

import br.unb.autoexp.dohko.parser.ApplicationDescriptorConverter
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(AutoExpInjectorProvider)
class AutoExpParsingTest {
	@Inject extension ApplicationDescriptorConverter
	

	def getApplicationDescriptor() {
		'''
			---
			name: "reanaSpl"
			user:
			  username: "user"
			  keys:
			    key:
			    - name: "key"
			      private-key-material: "xxx"
			      public-key-material: "yyy"
			      fingerprint: "zzz"
			    - name: "key2"
			      private-key-material: "xxx2"
			      public-key-material: "yyy2"
			      fingerprint: "zzz2"
			requirements:
			  cpu: 1
			  memory: 2
			  platform: "LINUX"
			  cost: 0.2
			  number-of-instances-per-cloud: 1
			preconditions:
			  packages:
			  - docker
			  - java  
			clouds:
			  cloud:
			  - name: "ec2"
			    provider:
			      name: "amazon"
			      max-resource-per-type: 2
			      description: "description"
			      service-class: "Service class" 
			    access-key:
			      access-key: "65AA31A0E92741A2"
			      secret-key: "619770ECE1D5492886D80B44E3AA2970"
			    region:
			    - name: "us-east-1"
			      endpoint: "endpoint"
			      status: UP
			      city: "City"
			      geographic-region: 5
			      zone:
			      - name: "name"
			        status: "status"
			    instance-types:
			      instance-type:
			      - name: "micro"
			        number-of-instances: 1
			      - name: "large"
			        number-of-instances: 1
			  - name: "ec3"
			    provider:
			      name: "amazon3"
			    access-key:
			      access-key: "65AA31A0E92741A2"
			      secret-key: "619770ECE1D5492886D80B44E3AA2970"
			applications:
			  application:
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        path: "$HOME/sequences/O60341.fasta"
			        generated: "N"
			      - name: "database"
			        path: "$HOME/uniprot_sprot.fasta"
			        generated: "N"
			      preconditions:
			        packages:
			        - reana-spl
			        - param  
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        path: "$HOME/sequences/O60342.fasta"
			        generated: "N"
			      - name: "database"
			        path: "$HOME/uniprot_sprot.fasta"
			        generated: "N"
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        path: "$HOME/sequences/O60341.fasta"
			        generated: "N"
			      - name: "database"
			        path: "$HOME/uniprot_sprot2.fasta"
			        generated: "N"
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        path: "$HOME/sequences/O60342.fasta"
			        generated: "N"
			      - name: "database"
			        path: "$HOME/uniprot_sprot2.fasta"
			        generated: "N"
			on-finish: "NONE"
		'''.toString.convert

	}

	@Test
	def void testName() {

		applicationDescriptor.name.assertEquals("reanaSpl")
	}

	@Test
	def void testUser() {

		applicationDescriptor.user.username.assertEquals("user")
		applicationDescriptor.user.keys.size.assertEquals(2)
	}

	@Test
	def void testKeys() {

		applicationDescriptor.user.keys.head.name.assertEquals("key")
		applicationDescriptor.user.keys.head.privateKeyMaterial.assertEquals("xxx")
		applicationDescriptor.user.keys.head.publicKeyMaterial.assertEquals("yyy")
		applicationDescriptor.user.keys.head.fingerPrint.assertEquals("zzz")
		applicationDescriptor.user.keys.tail.head.name.assertEquals("key2")
		applicationDescriptor.user.keys.tail.head.privateKeyMaterial.assertEquals("xxx2")
		applicationDescriptor.user.keys.tail.head.publicKeyMaterial.assertEquals("yyy2")
		applicationDescriptor.user.keys.tail.head.fingerPrint.assertEquals("zzz2")

	}

	@Test
	def void testRequirements() {

		applicationDescriptor.requirements.numberOfCpuCores.assertEquals(1)
		applicationDescriptor.requirements.memorySize.assertEquals(2)
		applicationDescriptor.requirements.platform.name.assertEquals("LINUX")
		applicationDescriptor.requirements.maximalCostPerHour.doubleValue.assertEquals(0.2, 0)
		applicationDescriptor.requirements.numberOfInstancesPerCloud.assertEquals(1)
	}

	@Test
	def void testClouds() {

		applicationDescriptor.clouds.size.assertEquals(2)
		applicationDescriptor.clouds.head.name.assertEquals("ec2")
		applicationDescriptor.clouds.tail.head.name.assertEquals("ec3")

	}

	@Test
	def void testProvider() {

		applicationDescriptor.clouds.head.provider.name.assertEquals("amazon")
		applicationDescriptor.clouds.head.provider.limitOfResourcesPerType.assertEquals(2)
		applicationDescriptor.clouds.head.provider.description.assertEquals("description")
		applicationDescriptor.clouds.head.provider.serviceClass.assertEquals("Service class")
		applicationDescriptor.clouds.tail.head.provider.name.assertEquals("amazon3")

	}

	@Test
	def void testAccessKey() {

		applicationDescriptor.clouds.head.accessKey.accessKey.assertEquals("65AA31A0E92741A2")
		applicationDescriptor.clouds.head.accessKey.secretKey.assertEquals("619770ECE1D5492886D80B44E3AA2970")

	}

	@Test
	def void testRegion() {

		applicationDescriptor.clouds.head.regions.size.assertEquals(1)
		applicationDescriptor.clouds.head.regions.head.name.assertEquals("us-east-1")
		applicationDescriptor.clouds.head.regions.head.endpoint.assertEquals("endpoint")
		 applicationDescriptor.clouds.head.regions.head.status.name.assertEquals("UP")
		applicationDescriptor.clouds.head.regions.head.city.assertEquals("City")
		applicationDescriptor.clouds.head.regions.head.geographicRegion.id.assertEquals(5)
	}


	@Test
	def void testInstanceTypes() {

	
		applicationDescriptor.clouds.head.instanceTypes.size.assertEquals(2)
		applicationDescriptor.clouds.head.instanceTypes.head.name.assertEquals("micro")
		applicationDescriptor.clouds.head.instanceTypes.head.numberOfInstances.assertEquals(1,0)
		applicationDescriptor.clouds.head.instanceTypes.tail.head.name.assertEquals("large")
		applicationDescriptor.clouds.head.instanceTypes.tail.head.numberOfInstances.assertEquals(1,0)
	}	
	
	@Test
	def void testApplications() {

	
		applicationDescriptor.applications.size.assertEquals(4)
		applicationDescriptor.applications.head.name.assertEquals("ssearch36")
		applicationDescriptor.applications.head.commandLine.assertEquals("ssearch36 -d 0 ${query} ${database}")
		applicationDescriptor.applications.head.files.size.assertEquals(2)
		applicationDescriptor.applications.head.files.head.name.assertEquals("query")
		applicationDescriptor.applications.head.files.head.path.assertEquals("$HOME/sequences/O60341.fasta")
		applicationDescriptor.applications.head.files.head.generated.name.assertEquals("NO")
	}		
	@Test
	def void testOnFinish() {
		applicationDescriptor.onFinished.name.assertEquals("NONE")
	}
		
	@Test
	def void testPreconditionGlobal() {
		//applicationDescriptor.requirements.preconditions.head.packages.head.assertEquals("docker")
		//applicationDescriptor.preconditions.head.packages.tail.head.assertEquals("java")
	}	
	
		
	@Test
	def void testPreconditionApplication() {
		applicationDescriptor.applications.head.preconditions.head.packages.head.assertEquals("reana-spl")
		applicationDescriptor.applications.head.preconditions.head.packages.tail.head.assertEquals("param")
		
		
	}				  
}
