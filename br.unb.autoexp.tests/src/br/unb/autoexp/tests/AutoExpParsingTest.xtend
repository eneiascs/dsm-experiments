/*
 * generated by Xtext 2.11.0
 */
package br.unb.autoexp.tests

import br.unb.autoexp.tests.dohko.ApplicationDescriptorConverter
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(AutoExpInjectorProvider)
class AutoExpParsingTest {
	@Inject extension ApplicationDescriptorConverter
	

	def getApplicationDescriptor() {
		'''
			---
			name: "reanaSpl"
			user:
			  username: "user"
			  keys:
			  - name: "key"
			    private-key-material: "xxx"
			    public-key-material: "yyy"
			    fingerprint: "zzz"
			  - name: "key2"
			    private-key-material: "xxx2"
			    public-key-material: "yyy2"
			    fingerprint: "zzz2"
			requirements:
			  cpu: 1
			  memory: 2
			  platform: "LINUX"
			  cost: 0.2
			  number-of-instances-per-cloud: 1
			preconditions:
			  packages:
			  - docker
			  - java  
			clouds:
			  - name: "ec2"
			    provider:
			      name: "amazon"
			      max-resource-per-type: 2
			      description: "description"
			      service-class: "Service class" 
			    access-key:
			      access-key: "65AA31A0E92741A2"
			      secret-key: "619770ECE1D5492886D80B44E3AA2970"
			    regions:
			    - name: "us-east-1"
			      endpoint: "endpoint"
			      status: UP
			      city: "City"
			      geographic-region: 5
			      zone:
			      - name: "name"
			        status: "status"
			    instance-types:
			      - name: "micro"
			        number-of-instances: 1
			      - name: "large"
			        number-of-instances: 1
			  - name: "ec3"
			    provider:
			      name: "amazon3"
			    access-key:
			      access-key: "65AA31A0E92741A2"
			      secret-key: "619770ECE1D5492886D80B44E3AA2970"
			applications:
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        source: "$HOME/sequences/O60341.fasta"
			        generated: "N"
			      - name: "database"
			        source: "$HOME/uniprot_sprot.fasta"
			        generated: "N"
			      preconditions:
			        packages:
			        - reana-spl
			        - param  
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        source: "$HOME/sequences/O60342.fasta"
			        generated: "N"
			      - name: "database"
			        source: "$HOME/uniprot_sprot.fasta"
			        generated: "N"
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        source: "$HOME/sequences/O60341.fasta"
			        generated: "N"
			      - name: "database"
			        source: "$HOME/uniprot_sprot2.fasta"
			        generated: "N"
			    - name: "ssearch36"
			      command-line: "ssearch36 -d 0 ${query} ${database}"
			      files:
			      - name: "query"
			        source: "$HOME/sequences/O60342.fasta"
			        generated: "N"
			      - name: "database"
			        source: "$HOME/uniprot_sprot2.fasta"
			        generated: "N"
			on-finish: "NONE"
		'''.toString.convert

	}

	@Test
	def void testName() {

		"reanaSpl".assertEquals(applicationDescriptor.name)
	}
	@Test
	def void testUser() {

		"user".assertEquals(applicationDescriptor.user.username)
		2.assertEquals(applicationDescriptor.user.keys.size)
	}

	@Test
	def void testKeys() {

		"key".assertEquals(applicationDescriptor.user.keys.head.name)
		"xxx".assertEquals(applicationDescriptor.user.keys.head.privateKeyMaterial)
		"yyy".assertEquals(applicationDescriptor.user.keys.head.publicKeyMaterial)
		"zzz".assertEquals(applicationDescriptor.user.keys.head.fingerPrint)
		"key2".assertEquals(applicationDescriptor.user.keys.tail.head.name)
		"xxx2".assertEquals(applicationDescriptor.user.keys.tail.head.privateKeyMaterial)
		"yyy2".assertEquals(applicationDescriptor.user.keys.tail.head.publicKeyMaterial)
		"zzz2".assertEquals(applicationDescriptor.user.keys.tail.head.fingerPrint)

	}

	@Test
	def void testRequirements() {

		1.assertEquals(applicationDescriptor.requirements.numberOfCpuCores)
		2.assertEquals(applicationDescriptor.requirements.memorySize)
		"LINUX".assertEquals(applicationDescriptor.requirements.platform.name)
		0.2.assertEquals(applicationDescriptor.requirements.maximalCostPerHour.doubleValue,0)
		1.assertEquals(applicationDescriptor.requirements.numberOfInstancesPerCloud)
	} 

	@Test
	def void testClouds() {

		2.assertEquals(applicationDescriptor.clouds.size)
		"ec2".assertEquals(applicationDescriptor.clouds.head.name)
		"ec3".assertEquals(applicationDescriptor.clouds.tail.head.name)

	}

	@Test
	def void testProvider() {

		"amazon".assertEquals(applicationDescriptor.clouds.head.provider.name)
		2.assertEquals(applicationDescriptor.clouds.head.provider.limitOfResourcesPerType)
		"description".assertEquals(applicationDescriptor.clouds.head.provider.description)
		"Service class".assertEquals(applicationDescriptor.clouds.head.provider.serviceClass)
		"amazon3".assertEquals(applicationDescriptor.clouds.tail.head.provider.name)

	}

	@Test
	def void testAccessKey() {

		"65AA31A0E92741A2".assertEquals(applicationDescriptor.clouds.head.accessKey.accessKey)
		"619770ECE1D5492886D80B44E3AA2970".assertEquals(applicationDescriptor.clouds.head.accessKey.secretKey)

	}

	@Test
	def void testRegion() {

		1.assertEquals(applicationDescriptor.clouds.head.regions.size)
		"us-east-1".assertEquals(applicationDescriptor.clouds.head.regions.head.name)
		"endpoint".assertEquals(applicationDescriptor.clouds.head.regions.head.endpoint)
		"UP".assertEquals( applicationDescriptor.clouds.head.regions.head.status.name)
		"City".assertEquals(applicationDescriptor.clouds.head.regions.head.city)
		5.assertEquals(applicationDescriptor.clouds.head.regions.head.geographicRegion.id)
	}


	@Test
	def void testInstanceTypes() {

	
		2.assertEquals(applicationDescriptor.clouds.head.instanceTypes.size)
		"micro".assertEquals(applicationDescriptor.clouds.head.instanceTypes.head.name)
		1.assertEquals(applicationDescriptor.clouds.head.instanceTypes.head.numberOfInstances)
		"large".assertEquals(applicationDescriptor.clouds.head.instanceTypes.tail.head.name)
		1.assertEquals(applicationDescriptor.clouds.head.instanceTypes.tail.head.numberOfInstances)
	}	
	
	@Test
	def void testApplications() {

	
		4.assertEquals(applicationDescriptor.getApplications().size)
		"ssearch36".assertEquals(applicationDescriptor.getApplications().head.name)
		"ssearch36 -d 0 ${query} ${database}".assertEquals(applicationDescriptor.getApplications().head.commandLine)
		2.assertEquals(applicationDescriptor.getApplications().head.files.size)
		"query".assertEquals(applicationDescriptor.getApplications().head.files.head.name)
		"$HOME/sequences/O60341.fasta".assertEquals(applicationDescriptor.getApplications().head.files.head.source)
		"NO".assertEquals(applicationDescriptor.getApplications().head.files.head.generated.name)
	}		
	@Test
	def void testOnFinish() {
		"NONE".assertEquals(applicationDescriptor.onFinished.name)
	}
		
	@Test
	def void testPreconditionsGlobal() {
		"docker".assertEquals(applicationDescriptor.getPreconditions.head.packages.head)
		"java".assertEquals(applicationDescriptor.getPreconditions.head.packages.tail.head)
	}	
	
		
	@Test
	def void testPreconditionApplication() {
		"reana-spl".assertEquals(applicationDescriptor.getApplications().head.preconditions.head.packages.head)
		"param".assertEquals(applicationDescriptor.getApplications().head.preconditions.head.packages.tail.head)
		
		
	}				  
}
