/*
 * generated by Xtext 2.11.0
 */
package br.unb.autoexp.formatting2

import br.unb.autoexp.autoExp.Author
import br.unb.autoexp.autoExp.Execution
import br.unb.autoexp.autoExp.Experiment
import br.unb.autoexp.autoExp.Goal
import br.unb.autoexp.autoExp.Keyword
import br.unb.autoexp.autoExp.Model
import br.unb.autoexp.autoExp.ResearchHypothesis
import br.unb.autoexp.autoExp.ResearchQuestion
import br.unb.autoexp.services.AutoExpGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class AutoExpFormatter extends AbstractFormatter2 {

	@Inject extension AutoExpGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {

		for (Experiment experiment : model.experiments) {
			experiment.format;
		}
	}


	def dispatch void format(Experiment experiment, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Author author : experiment.authors) {
			author.format;
		}
		experiment.getAbstract.format;
		for (Keyword keyword : experiment.keywords) {
			keyword.format;
		}
		for (Goal goal : experiment.goals) {
			goal.format;
		}
		for (ResearchQuestion researchQuestion : experiment.researchQuestions) {
			researchQuestion.format;
		}
		for (ResearchHypothesis researchHypothesis : experiment.researchHypotheses) {
			researchHypothesis.format;
		}
		experiment.threats.format;
		experiment.experimentalDesign.format;
		for (Execution execution : experiment.executions) {
			execution.format;
		}
		experiment.getAnalysis.format;
	}

// TODO: implement for ExperimentalDesign, Execution, ExperimentalObject, DepVariable, Factor, Context, Treatment, Entity, Attribute, AttributeType
}
