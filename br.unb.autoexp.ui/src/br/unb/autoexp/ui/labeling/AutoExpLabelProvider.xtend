/*
 * generated by Xtext 2.11.0
 */
package br.unb.autoexp.ui.labeling

import br.unb.autoexp.autoExp.Attribute
import br.unb.autoexp.autoExp.AttributeType
import br.unb.autoexp.autoExp.BasicType
import br.unb.autoexp.autoExp.EntityType
import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class AutoExpLabelProvider extends DefaultEObjectLabelProvider {
	@Inject extension TypeRepresentation

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(Attribute a) {
		a.name + if (a.type != null)
			" : " + a.type.representation
		else
			""
	}
// Labels and icons can be computed like this:
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}

class TypeRepresentation {
	def representation(AttributeType t) {
		val elementType = t.elementType
		val elementTypeRepr = switch (elementType) {
			BasicType: elementType.typeName
			EntityType: elementType?.entity.name
		}
		elementTypeRepr + if(t.array) "[]" else ""
	}
}
