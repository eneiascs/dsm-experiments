/**
 * @Generated by DSLFORGE
 */
package br.unb.autoexp.web.module;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;

import com.google.inject.Binder;

import br.unb.autoexp.rBaseApi.client.RBaseApiClient;
import br.unb.autoexp.rBaseApi.client.RBaseApiClientImpl;
import br.unb.autoexp.storage.service.ExperimentDesignStorageService;
import br.unb.autoexp.storage.service.ExperimentExecutionStorageService;
import br.unb.autoexp.web.data.DataFileGeneratorService;
import br.unb.autoexp.web.data.DataFileGeneratorServiceImpl;
import br.unb.autoexp.web.dohko.service.DohkoService;
import br.unb.autoexp.web.dohko.service.impl.DohkoServiceImpl;

public class WebAutoExpRuntimeModule extends AbstractWebAutoExpRuntimeModule {

	static final Logger logger = Logger.getLogger(WebAutoExpRuntimeModule.class);

	/**
	 * Add Custom bindings here
	 */
	@Override
	public void configure(Binder binder) {

		logger.info("Configuring web module " + this.getClass().getName());
		super.configure(binder);
		binder.bind(DataFileGeneratorService.class).to(DataFileGeneratorServiceImpl.class);
		binder.bind(ExperimentDesignStorageService.class).to(bindExperimentDesignStorageService());
		binder.bind(ExperimentExecutionStorageService.class).to(bindExperimentExecutionStorageService());

		binder.bind(DohkoService.class).to(bindDohkoService());
		binder.bind(RBaseApiClient.class).to(bindRBaseApiClient());

	}

	private Class<? extends ExperimentDesignStorageService> bindExperimentDesignStorageService() {
		IConfigurationElement[] elements = Platform.getExtensionRegistry()
				.getConfigurationElementsFor("br.unb.autoexp.storage");

		if (elements.length == 0) {
			throw new RuntimeException("No extension defined for 'br.unb.autoexp.storage'extension point");
		}
		if (elements.length > 1) {
			throw new RuntimeException("More than one extension defined for 'br.unb.autoexp.storage'extension point");
		}
		for (IConfigurationElement element : elements) {

			try {
				String pluginId = element.getContributor().getName();
				Bundle bundle = Platform.getBundle(pluginId);

				String className = element.getAttribute("designStorageImpl");
				Class<? extends ExperimentDesignStorageService> theClass = (Class<? extends ExperimentDesignStorageService>) bundle
						.loadClass(className);

				return theClass;
			} catch (ClassNotFoundException e) {

				e.printStackTrace();
				throw new RuntimeException("No extension defined for 'br.unb.autoexp.storage'extension point");
			}
		}
		return null;
	}

	private Class<? extends ExperimentExecutionStorageService> bindExperimentExecutionStorageService() {

		IConfigurationElement[] elements = Platform.getExtensionRegistry()
				.getConfigurationElementsFor("br.unb.autoexp.storage");

		if (elements.length == 0) {
			throw new RuntimeException("No extension defined for 'br.unb.autoexp.storage'extension point");
		}
		if (elements.length > 1) {
			throw new RuntimeException("More than one extension defined for 'br.unb.autoexp.storage'extension point");
		}
		for (IConfigurationElement element : elements) {

			try {
				String pluginId = element.getContributor().getName();
				Bundle bundle = Platform.getBundle(pluginId);

				String className = element.getAttribute("executionStorageImpl");
				Class<? extends ExperimentExecutionStorageService> theClass = (Class<? extends ExperimentExecutionStorageService>) bundle
						.loadClass(className);

				return theClass;
			} catch (ClassNotFoundException e) {

				e.printStackTrace();
				throw new RuntimeException("No extension defined for 'br.unb.autoexp.storage'extension point");
			}
		}
		return null;

	}

	private Class<RBaseApiClientImpl> bindRBaseApiClient() {
		return RBaseApiClientImpl.class;
	}

	public Class<? extends DohkoService> bindDohkoService() {
		return DohkoServiceImpl.class;
	}
}
